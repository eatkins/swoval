// Do not edit this file manually. It is autogenerated.

package com.swoval.files

import com.swoval.files.FileTreeDataViews.Converter
import com.swoval.files.FileTreeViews.Observer
import com.swoval.files.PathWatchers.Event
import com.swoval.files.PathWatchers.FollowSymlinks
import com.swoval.files.PathWatchers.NoFollowSymlinks
import com.swoval.functional.Either
import com.swoval.logging.Logger
import com.swoval.runtime.Platform
import java.io.IOException
import java.nio.file.Path
import java.util.concurrent.TimeUnit
import PathWatcherProviderImpl._

object PathWatcherProviderImpl {

  private def get(registry: DirectoryRegistry,
                  logger: Logger): NoFollowSymlinks[PathWatchers.Event] =
    new NoFollowWrapper(
      if (Platform.isMac) ApplePathWatchers.get(registry, logger)
      else PlatformWatcher.make(registry, logger))

  private def get[T <: AnyRef](converter: Converter[T],
                               registry: DirectoryRegistry,
                               logger: Logger): PathWatcher[T] =
    new ConvertedPathWatcher[T](get(registry, logger), converter, logger)

  private class ConvertedPathWatcher[T](private val pathWatcher: PathWatcher[Event],
                                        private val converter: Converter[T],
                                        logger: Logger)
      extends PathWatcher[T] {

    private val observers: Observers[T] = new Observers(logger)

    private val handle: Int = pathWatcher.addObserver(new Observer[Event]() {
      override def onError(t: Throwable): Unit = {
        observers.onError(t)
      }

      override def onNext(event: Event): Unit = {
        observe(event)
      }
    })

    override def register(path: Path, maxDepth: Int): Either[IOException, Boolean] =
      pathWatcher.register(path, maxDepth)

    override def unregister(path: Path): Unit = {
      pathWatcher.unregister(path)
    }

    override def close(): Unit = {
      pathWatcher.removeObserver(this.handle)
      observers.close()
      pathWatcher.close()
    }

    def addObserver(observer: Observer[_ >: T]): Int =
      observers.addObserver(observer)

    override def removeObserver(handle: Int): Unit = {
      observers.removeObserver(handle)
    }

    private def observe(event: Event): Unit = {
      try observers.onNext(converter.apply(event.getTypedPath))
      catch {
        case e: IOException => observers.onError(e)

      }
    }

  }

  private class Wrapper[T <: AnyRef](private val delegate: PathWatcher[T]) extends PathWatcher[T] {

    override def register(path: Path, maxDepth: Int): Either[IOException, Boolean] =
      delegate.register(path, maxDepth)

    override def unregister(path: Path): Unit = {
      delegate.unregister(path)
    }

    override def close(): Unit = {
      delegate.close()
    }

    override def addObserver(observer: Observer[_ >: T]): Int =
      delegate.addObserver(observer)

    override def removeObserver(handle: Int): Unit = {
      delegate.removeObserver(handle)
    }

  }

  private class NoFollowWrapper[T <: AnyRef](delegate: PathWatcher[T])
      extends Wrapper[T](delegate)
      with NoFollowSymlinks[T] {

    override def toString(): String =
      "NoFollowSymlinksPathWatcher@" + System.identityHashCode(this)

  }

  private class FollowWrapper[T <: AnyRef](delegate: PathWatcher[T])
      extends Wrapper[T](delegate)
      with FollowSymlinks[T] {

    override def toString(): String =
      "SymlinkFollowingPathWatcher@" + System.identityHashCode(this)

  }

}

class PathWatcherProviderImpl extends PathWatcherProvider {

  override def noFollowSymlinks(logger: Logger): NoFollowSymlinks[PathWatchers.Event] = {
    val registry: DirectoryRegistry = new DirectoryRegistryImpl()
    get(registry, logger)
  }

  override def followSymlinks(logger: Logger): FollowSymlinks[PathWatchers.Event] = {
    val registry: DirectoryRegistry = new DirectoryRegistryImpl()
    new SymlinkFollowingPathWatcherImpl(get(registry, logger), registry, logger, this)
  }

  override def polling(pollInterval: java.lang.Long,
                       timeUnit: TimeUnit,
                       logger: Logger): PathWatcher[Event] =
    new PollingPathWatcher(true, pollInterval, timeUnit, logger)

}
