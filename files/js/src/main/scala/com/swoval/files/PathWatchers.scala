// Do not edit this file manually. It is autogenerated.

package com.swoval.files

import com.swoval.logging.Logger
import java.io.IOException
import java.util.concurrent.TimeUnit
import scala.beans.{ BeanProperty, BooleanBeanProperty }

object PathWatchers {

  private val provider: PathWatcherProvider =
    SwovalProviderImpl.getDefaultProvider.getPathWatcherProvider

  def followSymlinks(logger: Logger): FollowSymlinks[PathWatchers.Event] =
    provider.followSymlinks(logger)

  def noFollowSymlinks(logger: Logger): NoFollowSymlinks[PathWatchers.Event] =
    provider.noFollowSymlinks(logger)

  def polling(duration: java.lang.Long,
              timeUnit: TimeUnit,
              logger: Logger): PathWatcher[PathWatchers.Event] =
    provider.polling(duration, timeUnit, logger)

  object Event {

    object Kind {

      /**
 A new file was created.
       */ /**
 A new file was created.
       */
      val Create: Kind = new Kind("Create")

      /**
 The file was deleted.
       */ /**
 The file was deleted.
       */
      val Delete: Kind = new Kind("Delete")

      /**
 An error occurred processing the event.
       */ /**
 An error occurred processing the event.
       */
      val Error: Kind = new Kind("Error")

      /**
 An existing file was modified.
       */ /**
 An existing file was modified.
       */
      val Modify: Kind = new Kind("Modify")

      /**
 The watching service overflowed so it may be necessary to poll.
       */ /**
 The watching service overflowed so it may be necessary to poll.
       */
      val Overflow: Kind = new Kind("Overflow")

    }

    /**
     * An enum like class to indicate the type of file event. It isn't an actual enum because the
     * scala.js codegen has problems with enum types.
     */
    class Kind(private val name: String) {

      override def toString(): String = name

      override def equals(other: Any): Boolean = other match {
        case other: Kind => other.name == this.name
        case _           => false

      }

      override def hashCode(): Int = name.hashCode

    }

  }

  /**
 Container for [[PathWatcher]] events.
   */
  class Event(@BeanProperty val typedPath: TypedPath, @BeanProperty val kind: Event.Kind) {

    override def equals(other: Any): Boolean = other match {
      case other: Event => {
        val that: Event = other
        this.typedPath == that.typedPath && this.kind == that.kind
      }
      case _ => false

    }

    override def hashCode(): Int = typedPath.hashCode ^ kind.hashCode

    override def toString(): String =
      "Event(" + typedPath.getPath + ", " + kind + ")"

  }

  trait FollowSymlinks[T <: AnyRef] extends PathWatcher[T]

  trait NoFollowSymlinks[T <: AnyRef] extends PathWatcher[T]

}

// Ignore the errors in javadoc in intellij. It is getting confused by having the java and
// js implementations.
