// Do not edit this file manually. It is autogenerated.

package com.swoval.files

import com.swoval.functional.Filters.AllPass
import com.swoval.files.FileTreeDataViews.Entry
import java.io.IOException
import java.nio.file.Path
import java.util.Iterator

class FileCachePathWatcher[T <: AnyRef](
    private val tree: FileCacheDirectoryTree[T],
    private val pathWatcher: PathWatcher[PathWatchers.Event]
) extends AutoCloseable {

  private val symlinkWatcher: SymlinkWatcher = tree.symlinkWatcher

  def register(path: Path, maxDepth: Int): Boolean = {
    val absolutePath: Path =
      if (path.isAbsolute) path else path.toAbsolutePath()
    val dir: CachedDirectory[T] =
      tree.register(absolutePath, maxDepth, pathWatcher)
    if (dir != null && symlinkWatcher != null) {
      if (dir.getEntry.getTypedPath.isSymbolicLink) {
        symlinkWatcher.addSymlink(absolutePath, maxDepth)
      }
      val it: Iterator[Entry[T]] =
        dir.listEntries(dir.getMaxDepth, AllPass).iterator()
      while (it.hasNext) {
        val entry: FileTreeDataViews.Entry[T] = it.next()
        if (entry.getTypedPath.isSymbolicLink) {
          val depth: Int =
            absolutePath.relativize(entry.getTypedPath.getPath).getNameCount
          symlinkWatcher.addSymlink(
            entry.getTypedPath.getPath,
            if (maxDepth == java.lang.Integer.MAX_VALUE) maxDepth
            else maxDepth - depth
          )
        }
      }
    }
    dir != null
  }

  def unregister(path: Path): Unit = {
    val absolutePath: Path =
      if (path.isAbsolute) path else path.toAbsolutePath()
    tree.unregister(absolutePath)
    pathWatcher.unregister(absolutePath)
  }

  def close(): Unit = {
    pathWatcher.close()
    if (symlinkWatcher != null) symlinkWatcher.close()
  }

}
