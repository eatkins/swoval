// Do not edit this file manually. It is autogenerated.

package com.swoval.files

import com.swoval.files.FileTreeDataViews.Converter
import com.swoval.files.FileTreeRepositories.FollowSymlinks
import com.swoval.files.FileTreeRepositories.NoFollowSymlinks
import com.swoval.logging.Logger
import java.io.IOException

trait FileTreeRepositoryProvider {

  /**
   * Create a default file tree repository that doesn't store a data value in the cache. The return
   * [[FileTreeRepository]] will follow symlinks. To set a data value or to control whether or
   * not to follow symlinks, see [[SwovalProvider.noFollowSymlinks]] or [[SwovalProvider.followSymlinks]]
   *
   * @return a file tree repository.
   */
  def getDefault(): FileTreeRepository[AnyRef]

  /**
   * Create a file tree repository that follows symlinks.
   *
   * @param converter converts a path to the cached value type T
   * @param logger the logger
   * @tparam T the value type of the cache entries
   * @return a file tree repository.
   */
  def followSymlinks[T <: AnyRef](converter: Converter[T], logger: Logger): FollowSymlinks[T]

  /**
   * Create a file tree repository that does not follow symlinks. Any symlinks in the results will
   * be treated like regular files though their [[TypedPath]] instance will return `true` for
   * [[TypedPath.isSymbolicLink]].
   *
   * @param converter converts a path to the cached value type T
   * @param logger the logger
   * @tparam T the value type of the cache entries
   * @return a file tree repository.
   */
  def noFollowSymlinks[T <: AnyRef](converter: Converter[T], logger: Logger): NoFollowSymlinks[T]

}
