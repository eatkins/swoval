// Do not edit this file manually. It is autogenerated.

package com.swoval.files

import com.swoval.files.FileTreeDataViews.CacheObserver
import com.swoval.files.FileTreeDataViews.Converter
import com.swoval.files.FileTreeDataViews.Converters
import com.swoval.files.FileTreeDataViews.Entry
import com.swoval.files.FileTreeRepositories.FollowSymlinks
import com.swoval.files.FileTreeRepositories.NoFollowSymlinks
import com.swoval.files.FileTreeViews.Observer
import com.swoval.files.PathWatchers.Event
import com.swoval.functional.Either
import com.swoval.functional.Filter
import com.swoval.functional.IOFunction
import com.swoval.logging.Logger
import com.swoval.logging.Loggers
import com.swoval.logging.Loggers.Level
import java.io.IOException
import java.nio.file.Path
import java.util.List
import FileTreeRepositoryProviderImpl._

object FileTreeRepositoryProviderImpl {

  def get[T <: AnyRef](
      followLinks: Boolean,
      converter: Converter[T],
      logger: Logger,
      newPathWatcher: IOFunction[Logger, PathWatcher[Event]]): FileTreeRepository[T] = {
    val symlinkWatcher: SymlinkWatcher =
      if (followLinks) new SymlinkWatcher(newPathWatcher.apply(logger), logger)
      else null
    val callbackExecutor: Executor =
      Executor.make("FileTreeRepository-callback-executor", logger)
    val tree: FileCacheDirectoryTree[T] =
      new FileCacheDirectoryTree[T](converter, callbackExecutor, symlinkWatcher, false, logger)
    val pathWatcher: PathWatcher[Event] = newPathWatcher.apply(logger)
    pathWatcher.addObserver(fileTreeObserver(tree, logger))
    val watcher: FileCachePathWatcher[T] =
      new FileCachePathWatcher[T](tree, pathWatcher)
    new FileTreeRepositoryImpl(tree, watcher, logger)
  }

  val PATH_WATCHER_FACTORY: IOFunction[Logger, PathWatcher[Event]] =
    new IOFunction[Logger, PathWatcher[Event]]() {
      override def apply(logger: Logger): PathWatcher[Event] =
        PathWatchers.noFollowSymlinks(logger)
    }

  private class Interrupted(val cause: InterruptedException) extends RuntimeException

  private def fileTreeObserver(tree: FileCacheDirectoryTree[_], logger: Logger): Observer[Event] =
    new Observer[Event]() {
      override def onError(t: Throwable): Unit = {
        if (Loggers.shouldLog(logger, Level.ERROR)) {
          logger.error("Error while monitoring the file system " + t)
        }
      }

      override def onNext(event: Event): Unit = {
        tree.handleEvent(event)
      }
    }

  private class Wrapper[T <: AnyRef](private val delegate: FileTreeRepository[T])
      extends FileTreeRepository[T] {

    override def register(path: Path, maxDepth: Int): Either[IOException, Boolean] =
      delegate.register(path, maxDepth)

    override def unregister(path: Path): Unit = {
      delegate.unregister(path)
    }

    override def listEntries(path: Path,
                             maxDepth: Int,
                             filter: Filter[_ >: Entry[T]]): List[Entry[T]] =
      delegate.listEntries(path, maxDepth, filter)

    override def list(path: Path, maxDepth: Int, filter: Filter[_ >: TypedPath]): List[TypedPath] =
      delegate.list(path, maxDepth, filter)

    override def close(): Unit = {
      delegate.close()
    }

    override def addObserver(observer: Observer[_ >: Entry[T]]): Int =
      delegate.addObserver(observer)

    override def removeObserver(handle: Int): Unit = {
      delegate.removeObserver(handle)
    }

    override def addCacheObserver(observer: CacheObserver[T]): Int =
      delegate.addCacheObserver(observer)

  }

  private class NoFollowWrapper[T <: AnyRef](delegate: FileTreeRepository[T])
      extends Wrapper[T](delegate)
      with NoFollowSymlinks[T] {

    override def toString(): String =
      "NoFollowSymlinksFileTreeRepository@" + System.identityHashCode(this)

  }

  private class FollowWrapper[T <: AnyRef](delegate: FileTreeRepository[T])
      extends Wrapper[T](delegate)
      with FollowSymlinks[T] {

    override def toString(): String =
      "SymlinkFollowingFileTreeRepository@" + System.identityHashCode(this)

  }

}

class FileTreeRepositoryProviderImpl extends FileTreeRepositoryProvider {

  override def getDefault(): FileTreeRepository[AnyRef] =
    followSymlinks(Converters.UNIT_CONVERTER, Loggers.getLogger)

  override def followSymlinks[T <: AnyRef](converter: Converter[T],
                                           logger: Logger): FollowSymlinks[T] =
    new FollowWrapper(get(true, converter, logger, PATH_WATCHER_FACTORY))

  override def noFollowSymlinks[T <: AnyRef](converter: Converter[T],
                                             logger: Logger): NoFollowSymlinks[T] =
    new NoFollowWrapper(get(false, converter, logger, PATH_WATCHER_FACTORY))

}
